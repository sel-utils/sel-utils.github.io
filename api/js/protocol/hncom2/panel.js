/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
/** @module sul/protocol/hncom2/panel */

//import Types from 'types';

const Panel = {

	Connection: class extends Buffer {

		static get ID(){ return 36; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(hash=new Uint8Array(64), address=[], worldId=0) {
			super();
			this.hash = hash;
			this.address = address;
			this.worldId = worldId;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(36);
			this.writeBytes(this.hash);
			this.writeVaruint(this.address.length); this.writeBytes(this.address);
			this.writeVaruint(this.worldId);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			var aramafa=64; this.hash=this.readBytes(aramafa);
			var aramyrcv=this.readVaruint(); this.address=this.readBytes(aramyrcv);
			this.worldId=this.readVaruint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Panel.Connection().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Connection(hash: " + this.hash + ", address: " + this.address + ", worldId: " + this.worldId + ")";
		}

	},

}

//export { Panel };