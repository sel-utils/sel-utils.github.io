/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
/** @module sul/protocol/hncom2/world */

//import Types from 'types';

const World = {

	Add: class extends Buffer {

		static get ID(){ return 31; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		// dimension
		static get OVERWORLD(){ return 0; }
		static get NETHER(){ return 1; }
		static get END(){ return 2; }

		// generator
		static get DEFAULT(){ return 0; }
		static get FLAT(){ return 1; }

		// difficulty
		static get PEACEFUL(){ return 0; }
		static get EASY(){ return 1; }
		static get NORMAL(){ return 2; }
		static get HARD(){ return 3; }
		static get HARDCORE(){ return 4; }

		// gamemode
		static get SURVIVAL(){ return 0; }
		static get CREATIVE(){ return 1; }
		static get ADVENTURE(){ return 2; }
		static get SPECTATOR(){ return 3; }

		constructor(worldId=0, name="", dimension=0, generator=0, difficulty=0, gamemode=0, spawnPoint={x:0,z:0}, time=0, seed=0, parent=-1) {
			super();
			this.worldId = worldId;
			this.name = name;
			this.dimension = dimension;
			this.generator = generator;
			this.difficulty = difficulty;
			this.gamemode = gamemode;
			this.spawnPoint = spawnPoint;
			this.time = time;
			this.seed = seed;
			this.parent = parent;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(31);
			this.writeVaruint(this.worldId);
			var dhc5y1=this.encodeString(this.name); this.writeVaruint(dhc5y1.length); this.writeBytes(dhc5y1);
			this.writeBigEndianByte(this.dimension);
			this.writeBigEndianByte(this.generator);
			this.writeBigEndianByte(this.difficulty);
			this.writeBigEndianByte(this.gamemode);
			this.writeVarint(this.spawnPoint.x); this.writeVarint(this.spawnPoint.z);
			this.writeBigEndianShort(this.time);
			this.writeVarint(this.seed);
			this.writeVarint(this.parent);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.worldId=this.readVaruint();
			this.name=this.decodeString(this.readBytes(this.readVaruint()));
			this.dimension=this.readBigEndianByte();
			this.generator=this.readBigEndianByte();
			this.difficulty=this.readBigEndianByte();
			this.gamemode=this.readBigEndianByte();
			this.spawnPoint={}; this.spawnPoint.x=this.readVarint(); this.spawnPoint.z=this.readVarint();
			this.time=this.readBigEndianShort();
			this.seed=this.readVarint();
			this.parent=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new World.Add().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Add(worldId: " + this.worldId + ", name: " + this.name + ", dimension: " + this.dimension + ", generator: " + this.generator + ", difficulty: " + this.difficulty + ", gamemode: " + this.gamemode + ", spawnPoint: " + this.spawnPoint + ", time: " + this.time + ", seed: " + this.seed + ", parent: " + this.parent + ")";
		}

	},

	Remove: class extends Buffer {

		static get ID(){ return 32; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(worldId=0) {
			super();
			this.worldId = worldId;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(32);
			this.writeVaruint(this.worldId);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.worldId=this.readVaruint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new World.Remove().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Remove(worldId: " + this.worldId + ")";
		}

	},

	UpdateDifficulty: class extends Buffer {

		static get ID(){ return 33; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(worldId=0, difficulty=0) {
			super();
			this.worldId = worldId;
			this.difficulty = difficulty;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(33);
			this.writeVaruint(this.worldId);
			this.writeBigEndianByte(this.difficulty);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.worldId=this.readVaruint();
			this.difficulty=this.readBigEndianByte();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new World.UpdateDifficulty().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "UpdateDifficulty(worldId: " + this.worldId + ", difficulty: " + this.difficulty + ")";
		}

	},

	UpdateGamemode: class extends Buffer {

		static get ID(){ return 34; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(worldId=0, gamemode=0) {
			super();
			this.worldId = worldId;
			this.gamemode = gamemode;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(34);
			this.writeVaruint(this.worldId);
			this.writeBigEndianByte(this.gamemode);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.worldId=this.readVaruint();
			this.gamemode=this.readBigEndianByte();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new World.UpdateGamemode().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "UpdateGamemode(worldId: " + this.worldId + ", gamemode: " + this.gamemode + ")";
		}

	},

	RequestCreation: class extends Buffer {

		static get ID(){ return 35; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(name="", dimension=0, generator=0, difficulty=0, gamemode=0, seed=0, parent=-1) {
			super();
			this.name = name;
			this.dimension = dimension;
			this.generator = generator;
			this.difficulty = difficulty;
			this.gamemode = gamemode;
			this.seed = seed;
			this.parent = parent;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(35);
			var dhc5y1=this.encodeString(this.name); this.writeVaruint(dhc5y1.length); this.writeBytes(dhc5y1);
			this.writeBigEndianByte(this.dimension);
			this.writeBigEndianByte(this.generator);
			this.writeBigEndianByte(this.difficulty);
			this.writeBigEndianByte(this.gamemode);
			this.writeVarint(this.seed);
			this.writeVarint(this.parent);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.name=this.decodeString(this.readBytes(this.readVaruint()));
			this.dimension=this.readBigEndianByte();
			this.generator=this.readBigEndianByte();
			this.difficulty=this.readBigEndianByte();
			this.gamemode=this.readBigEndianByte();
			this.seed=this.readVarint();
			this.parent=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new World.RequestCreation().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "RequestCreation(name: " + this.name + ", dimension: " + this.dimension + ", generator: " + this.generator + ", difficulty: " + this.difficulty + ", gamemode: " + this.gamemode + ", seed: " + this.seed + ", parent: " + this.parent + ")";
		}

	},

}

//export { World };