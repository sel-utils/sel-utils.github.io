/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
/** @module sul/protocol/raknet8/unconnected */

//import Types from 'types';

const Unconnected = {

	Ping: class extends Buffer {

		static get ID(){ return 1; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(pingId=0, magic=new Uint8Array(16), guid=0) {
			super();
			this.pingId = pingId;
			this.magic = magic;
			this.guid = guid;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(1);
			this.writeBigEndianLong(this.pingId);
			this.writeBytes(this.magic);
			this.writeBigEndianLong(this.guid);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.pingId=this.readBigEndianLong();
			var arambfam=16; this.magic=this.readBytes(arambfam);
			this.guid=this.readBigEndianLong();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Unconnected.Ping().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Ping(pingId: " + this.pingId + ", magic: " + this.magic + ", guid: " + this.guid + ")";
		}

	},

	Pong: class extends Buffer {

		static get ID(){ return 28; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(pingId=0, serverId=0, magic=new Uint8Array(16), status="") {
			super();
			this.pingId = pingId;
			this.serverId = serverId;
			this.magic = magic;
			this.status = status;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(28);
			this.writeBigEndianLong(this.pingId);
			this.writeBigEndianLong(this.serverId);
			this.writeBytes(this.magic);
			var dhc5dfdm=this.encodeString(this.status); this.writeBigEndianShort(dhc5dfdm.length); this.writeBytes(dhc5dfdm);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.pingId=this.readBigEndianLong();
			this.serverId=this.readBigEndianLong();
			var arambfam=16; this.magic=this.readBytes(arambfam);
			this.status=this.decodeString(this.readBytes(this.readBigEndianShort()));
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Unconnected.Pong().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Pong(pingId: " + this.pingId + ", serverId: " + this.serverId + ", magic: " + this.magic + ", status: " + this.status + ")";
		}

	},

	OpenConnectionRequest1: class extends Buffer {

		static get ID(){ return 5; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(magic=new Uint8Array(16), protocol=0, mtu=null) {
			super();
			this.magic = magic;
			this.protocol = protocol;
			this.mtu = mtu;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(5);
			this.writeBytes(this.magic);
			this.writeBigEndianByte(this.protocol);
			this.writeBytes(this.mtu);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			var arambfam=16; this.magic=this.readBytes(arambfam);
			this.protocol=this.readBigEndianByte();
			this.mtu=Array.from(this._buffer); this._buffer=[];
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Unconnected.OpenConnectionRequest1().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "OpenConnectionRequest1(magic: " + this.magic + ", protocol: " + this.protocol + ", mtu: " + this.mtu + ")";
		}

	},

	OpenConnectionReply1: class extends Buffer {

		static get ID(){ return 6; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(magic=new Uint8Array(16), serverId=0, security=false, mtuLength=0) {
			super();
			this.magic = magic;
			this.serverId = serverId;
			this.security = security;
			this.mtuLength = mtuLength;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(6);
			this.writeBytes(this.magic);
			this.writeBigEndianLong(this.serverId);
			this.writeBigEndianByte(this.security?1:0);
			this.writeBigEndianShort(this.mtuLength);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			var arambfam=16; this.magic=this.readBytes(arambfam);
			this.serverId=this.readBigEndianLong();
			this.security=this.readBigEndianByte()!==0;
			this.mtuLength=this.readBigEndianShort();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Unconnected.OpenConnectionReply1().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "OpenConnectionReply1(magic: " + this.magic + ", serverId: " + this.serverId + ", security: " + this.security + ", mtuLength: " + this.mtuLength + ")";
		}

	},

	OpenConnectionRequest2: class extends Buffer {

		static get ID(){ return 7; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(magic=new Uint8Array(16), serverAddress=null, mtuLength=0, clientId=0) {
			super();
			this.magic = magic;
			this.serverAddress = serverAddress;
			this.mtuLength = mtuLength;
			this.clientId = clientId;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(7);
			this.writeBytes(this.magic);
			this.writeBytes(this.serverAddress.encode());
			this.writeBigEndianShort(this.mtuLength);
			this.writeBigEndianLong(this.clientId);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			var arambfam=16; this.magic=this.readBytes(arambfam);
			this.serverAddress=Types.Address.fromBuffer(this._buffer); this._buffer=this.serverAddress._buffer;
			this.mtuLength=this.readBigEndianShort();
			this.clientId=this.readBigEndianLong();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Unconnected.OpenConnectionRequest2().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "OpenConnectionRequest2(magic: " + this.magic + ", serverAddress: " + this.serverAddress + ", mtuLength: " + this.mtuLength + ", clientId: " + this.clientId + ")";
		}

	},

	OpenConnectionReply2: class extends Buffer {

		static get ID(){ return 8; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(magic=new Uint8Array(16), serverId=0, clientAddress=null, mtuLength=0, security=false) {
			super();
			this.magic = magic;
			this.serverId = serverId;
			this.clientAddress = clientAddress;
			this.mtuLength = mtuLength;
			this.security = security;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(8);
			this.writeBytes(this.magic);
			this.writeBigEndianLong(this.serverId);
			this.writeBytes(this.clientAddress.encode());
			this.writeBigEndianShort(this.mtuLength);
			this.writeBigEndianByte(this.security?1:0);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			var arambfam=16; this.magic=this.readBytes(arambfam);
			this.serverId=this.readBigEndianLong();
			this.clientAddress=Types.Address.fromBuffer(this._buffer); this._buffer=this.clientAddress._buffer;
			this.mtuLength=this.readBigEndianShort();
			this.security=this.readBigEndianByte()!==0;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Unconnected.OpenConnectionReply2().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "OpenConnectionReply2(magic: " + this.magic + ", serverId: " + this.serverId + ", clientAddress: " + this.clientAddress + ", mtuLength: " + this.mtuLength + ", security: " + this.security + ")";
		}

	},

}

//export { Unconnected };