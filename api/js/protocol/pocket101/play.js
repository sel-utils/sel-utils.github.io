/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket101.xml
 */
/** @module sul/protocol/pocket101/play */

//import Types from 'types';

/**
 * Packets related to the gameplay. Network-related packets (encapsulation, acks, nacks)
 * are managed by RakNet and every packet in this section is encapsualted in an Encapsualted
 * packet.
 */
const Play = {

	/**
	 * First MCPE packet sent after the establishment of the connection through raknet.
	 * It contains informations about the player.
	 */
	Login: class extends Buffer {

		static get ID(){ return 1; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		// edition
		static get CLASSIC(){ return 0; }
		static get EDUCATION(){ return 1; }

		/**
		 * @param protocol
		 *        Version of the protocol used by the player.
		 * @param edition
		 *        Edition that the player is using to join the server. The different editions may have different features
		 *        and servers may block the access from unaccepted editions of the game.
		 * @param body
		 *        Zlib-compressed bytes that contains 2 JWTs with more informations about the player and its account.
		 *        Once uncompressed the resulting payload will contain 2 JWTs which length is indicated by a little-endian
		 *        unsigned integer each.
		 */
		constructor(protocol=0, edition=0, body=[]) {
			super();
			this.protocol = protocol;
			this.edition = edition;
			this.body = body;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(1);
			this.writeBigEndianInt(this.protocol);
			this.writeBigEndianByte(this.edition);
			this.writeVaruint(this.body.length); this.writeBytes(this.body);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.protocol=this.readBigEndianInt();
			this.edition=this.readBigEndianByte();
			var aramy9e=this.readVaruint(); this.body=this.readBytes(aramy9e);
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.Login().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Login(protocol: " + this.protocol + ", edition: " + this.edition + ", body: " + this.body + ")";
		}

	},

	/**
	 * Packet sent as response to Login to indicate whether the connection has been accepted
	 * and when the player is ready to spawn in the world.
	 */
	PlayStatus: class extends Buffer {

		static get ID(){ return 2; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// status
		static get OK(){ return 0; }
		static get OUTDATED_CLIENT(){ return 1; }
		static get OUTDATED_SERVER(){ return 2; }
		static get SPAWNED(){ return 3; }
		static get INVALID_TENANT(){ return 4; }
		static get EDITION_MISMATCH(){ return 5; }

		constructor(status=0) {
			super();
			this.status = status;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(2);
			this.writeBigEndianInt(this.status);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.status=this.readBigEndianInt();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.PlayStatus().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "PlayStatus(status: " + this.status + ")";
		}

	},

	ServerToClientHandshake: class extends Buffer {

		static get ID(){ return 3; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(serverPublicKey="", token=[]) {
			super();
			this.serverPublicKey = serverPublicKey;
			this.token = token;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(3);
			var dhc5zjzj=this.encodeString(this.serverPublicKey); this.writeVaruint(dhc5zjzj.length); this.writeBytes(dhc5zjzj);
			this.writeVaruint(this.token.length); this.writeBytes(this.token);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.serverPublicKey=this.decodeString(this.readBytes(this.readVaruint()));
			var aramd9z4=this.readVaruint(); this.token=this.readBytes(aramd9z4);
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ServerToClientHandshake().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ServerToClientHandshake(serverPublicKey: " + this.serverPublicKey + ", token: " + this.token + ")";
		}

	},

	ClientToServerHandshake: class extends Buffer {

		static get ID(){ return 4; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor() {
			super();
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(4);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ClientToServerHandshake().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ClientToServerHandshake()";
		}

	},

	/**
	 * Disconnects the player from the server.
	 */
	Disconnect: class extends Buffer {

		static get ID(){ return 5; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		/**
		 * @param hideDisconnectionScreen
		 *        Indicates whether to display the main menu screen or a disconnection message.
		 * @param message
		 *        The message to display in the disconnection screen. If the message is in the game's language file
		 *        it will be translated client-side.
		 */
		constructor(hideDisconnectionScreen=false, message="") {
			super();
			this.hideDisconnectionScreen = hideDisconnectionScreen;
			this.message = message;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(5);
			this.writeBigEndianByte(this.hideDisconnectionScreen?1:0);
			if(hideDisconnectionScreen==false){ var dhc5znyd=this.encodeString(this.message); this.writeVaruint(dhc5znyd.length); this.writeBytes(dhc5znyd); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.hideDisconnectionScreen=this.readBigEndianByte()!==0;
			if(hideDisconnectionScreen==false){ this.message=this.decodeString(this.readBytes(this.readVaruint())); }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.Disconnect().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Disconnect(hideDisconnectionScreen: " + this.hideDisconnectionScreen + ", message: " + this.message + ")";
		}

	},

	/**
	 * One ore more packet, each prefixed with their varuint-encoded length, compressed
	 * with zlib's deflate algorithm.
	 */
	Batch: class extends Buffer {

		static get ID(){ return 6; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		/**
		 * @param data
		 *        Compressed data.
		 */
		constructor(data=[]) {
			super();
			this.data = data;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(6);
			this.writeVaruint(this.data.length); this.writeBytes(this.data);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			var aramzfy=this.readVaruint(); this.data=this.readBytes(aramzfy);
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.Batch().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Batch(data: " + this.data + ")";
		}

	},

	ResourcePacksInfo: class extends Buffer {

		static get ID(){ return 7; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(mustAccept=false, behaviourPacks=null, resourcePacks=null) {
			super();
			this.mustAccept = mustAccept;
			this.behaviourPacks = behaviourPacks;
			this.resourcePacks = resourcePacks;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(7);
			this.writeBigEndianByte(this.mustAccept?1:0);
			this.writeLittleEndianShort(this.behaviourPacks.length); for(var dhc5zhdl in this.behaviourPacks){ this.writeBytes(this.behaviourPacks[dhc5zhdl].encode()); }
			this.writeLittleEndianShort(this.resourcePacks.length); for(var dhc5zndj in this.resourcePacks){ this.writeBytes(this.resourcePacks[dhc5zndj].encode()); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.mustAccept=this.readBigEndianByte()!==0;
			var aramyvyz=this.readLittleEndianShort(); this.behaviourPacks=[]; for(var dhc5zhdl=0;dhc5zhdl<aramyvyz;dhc5zhdl++){ this.behaviourPacks[dhc5zhdl]=Types.PackWithSize.fromBuffer(this._buffer); this._buffer=this.behaviourPacks[dhc5zhdl]._buffer; }
			var aramcvbv=this.readLittleEndianShort(); this.resourcePacks=[]; for(var dhc5zndj=0;dhc5zndj<aramcvbv;dhc5zndj++){ this.resourcePacks[dhc5zndj]=Types.PackWithSize.fromBuffer(this._buffer); this._buffer=this.resourcePacks[dhc5zndj]._buffer; }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ResourcePacksInfo().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ResourcePacksInfo(mustAccept: " + this.mustAccept + ", behaviourPacks: " + this.behaviourPacks + ", resourcePacks: " + this.resourcePacks + ")";
		}

	},

	ResourcePacksStackPacket: class extends Buffer {

		static get ID(){ return 8; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(mustAccept=false, behaviourPacks=null, resourcePacks=null) {
			super();
			this.mustAccept = mustAccept;
			this.behaviourPacks = behaviourPacks;
			this.resourcePacks = resourcePacks;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(8);
			this.writeBigEndianByte(this.mustAccept?1:0);
			this.writeLittleEndianShort(this.behaviourPacks.length); for(var dhc5zhdl in this.behaviourPacks){ this.writeBytes(this.behaviourPacks[dhc5zhdl].encode()); }
			this.writeLittleEndianShort(this.resourcePacks.length); for(var dhc5zndj in this.resourcePacks){ this.writeBytes(this.resourcePacks[dhc5zndj].encode()); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.mustAccept=this.readBigEndianByte()!==0;
			var aramyvyz=this.readLittleEndianShort(); this.behaviourPacks=[]; for(var dhc5zhdl=0;dhc5zhdl<aramyvyz;dhc5zhdl++){ this.behaviourPacks[dhc5zhdl]=Types.Pack.fromBuffer(this._buffer); this._buffer=this.behaviourPacks[dhc5zhdl]._buffer; }
			var aramcvbv=this.readLittleEndianShort(); this.resourcePacks=[]; for(var dhc5zndj=0;dhc5zndj<aramcvbv;dhc5zndj++){ this.resourcePacks[dhc5zndj]=Types.Pack.fromBuffer(this._buffer); this._buffer=this.resourcePacks[dhc5zndj]._buffer; }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ResourcePacksStackPacket().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ResourcePacksStackPacket(mustAccept: " + this.mustAccept + ", behaviourPacks: " + this.behaviourPacks + ", resourcePacks: " + this.resourcePacks + ")";
		}

	},

	ResourcePackClientResponse: class extends Buffer {

		static get ID(){ return 9; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		// status
		static get REFUSED(){ return 1; }
		static get SEND_PACKS(){ return 2; }
		static get HAVE_ALL_PACKS(){ return 3; }
		static get COMPLETED(){ return 4; }

		constructor(status=0, packIds=null) {
			super();
			this.status = status;
			this.packIds = packIds;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(9);
			this.writeBigEndianByte(this.status);
			this.writeLittleEndianShort(this.packIds.length); for(var dhc5ynsr in this.packIds){ var dhc5ynsr=this.encodeString(this.packIds[dhc5ynsr]); this.writeVaruint(dhc5ynsr.length); this.writeBytes(dhc5ynsr); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.status=this.readBigEndianByte();
			var aramcfal=this.readLittleEndianShort(); this.packIds=[]; for(var dhc5ynsr=0;dhc5ynsr<aramcfal;dhc5ynsr++){ this.packIds[dhc5ynsr]=this.decodeString(this.readBytes(this.readVaruint())); }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ResourcePackClientResponse().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ResourcePackClientResponse(status: " + this.status + ", packIds: " + this.packIds + ")";
		}

	},

	/**
	 * Sends or receives a message from the player. Every variant's field can contain Minecraft's
	 * formatting codes.
	 * Every packet sent in the same game tick should be joined together with `\n§r` (line
	 * break and reset formatting), otherwise the messages will be displayed multiple times
	 * on the client's chat (see [MCPE-17631](https://bugs.mojang.com/browse/MCPE-17631)).
	 */
	Text: class extends Buffer {

		static get ID(){ return 10; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		// type (variant)
		static get RAW(){ return 0; }
		static get CHAT(){ return 1; }
		static get TRANSLATION(){ return 2; }
		static get POPUP(){ return 3; }
		static get TIP(){ return 4; }
		static get SYSTEM(){ return 5; }
		static get WHISPER(){ return 6; }

		constructor(type=0) {
			super();
			this.type = type;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(10);
			this.writeBigEndianByte(this.type);
	switch(this.type) {
		case 0:
			this.writeBigEndianByte(this.type);
			break;
		case 1:
			this.writeBigEndianByte(this.type);
			break;
		case 2:
			this.writeBigEndianByte(this.type);
			break;
		case 3:
			this.writeBigEndianByte(this.type);
			break;
		case 4:
			this.writeBigEndianByte(this.type);
			break;
		case 5:
			this.writeBigEndianByte(this.type);
			break;
		case 6:
			this.writeBigEndianByte(this.type);
			break;
		default: break;
	}
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.type=this.readBigEndianByte();
			switch(this.type) {
				case 0:
					this.message=this.decodeString(this.readBytes(this.readVaruint()));
					break;
				case 1:
					this.sender=this.decodeString(this.readBytes(this.readVaruint()));
					this.message=this.decodeString(this.readBytes(this.readVaruint()));
					break;
				case 2:
					this.message=this.decodeString(this.readBytes(this.readVaruint()));
					var aramcfy1=this.readVaruint(); this.parameters=[]; for(var dhc5yjbv=0;dhc5yjbv<aramcfy1;dhc5yjbv++){ this.parameters[dhc5yjbv]=this.decodeString(this.readBytes(this.readVaruint())); }
					break;
				case 3:
					this.title=this.decodeString(this.readBytes(this.readVaruint()));
					this.subtitle=this.decodeString(this.readBytes(this.readVaruint()));
					break;
				case 4:
					this.message=this.decodeString(this.readBytes(this.readVaruint()));
					break;
				case 5:
					this.message=this.decodeString(this.readBytes(this.readVaruint()));
					break;
				case 6:
					this.sender=this.decodeString(this.readBytes(this.readVaruint()));
					this.message=this.decodeString(this.readBytes(this.readVaruint()));
					break;
				default: break;
			}
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.Text().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Text(type: " + this.type + ")";
		}

	},

	/**
	 * Sets the time.
	 */
	SetTime: class extends Buffer {

		static get ID(){ return 11; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		/**
		 * @param time
		 *        Time of the day in a range from 0 to 24000. If higher or lower it will be moduled to 24000.
		 * @param daylightCycle
		 *        Indicates whether the daylight cycle is active. If not, the time will be stopped at the value given
		 *        in the previous field.
		 */
		constructor(time=0, daylightCycle=false) {
			super();
			this.time = time;
			this.daylightCycle = daylightCycle;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(11);
			this.writeVarint(this.time);
			this.writeBigEndianByte(this.daylightCycle?1:0);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.time=this.readVarint();
			this.daylightCycle=this.readBigEndianByte()!==0;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.SetTime().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetTime(time: " + this.time + ", daylightCycle: " + this.daylightCycle + ")";
		}

	},

	StartGame: class extends Buffer {

		static get ID(){ return 12; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// dimension
		static get OVERWORLD(){ return 0; }
		static get NETHER(){ return 1; }
		static get END(){ return 2; }

		// generator
		static get OLD(){ return 0; }
		static get INFINITE(){ return 1; }
		static get FLAT(){ return 2; }

		// world gamemode
		static get SURVIVAL(){ return 0; }
		static get CREATIVE(){ return 1; }

		// difficulty
		static get PEACEFUL(){ return 0; }
		static get EASY(){ return 1; }
		static get NORMAL(){ return 2; }
		static get HARD(){ return 3; }

		// edition
		static get CLASSIC(){ return 0; }
		static get EDUCATION(){ return 1; }

		/**
		 * @param entityId
		 *        Player's entity id that uniquely identifies the entity of the server.
		 * @param position
		 *        Position where the player will spawn.
		 * @param seed
		 *        World's seed. It's displayed in the game's world settings and in beta's debug informations on top
		 *        of the screen.
		 * @param dimension
		 *        World's dimension. Different dimensions have different sky colours and render distances.
		 * @param generator
		 *        World's type. It's displayed in the game's world settings.
		 *        In old and infinite world the sky becomes darker at 32 blocks of altitude and in flat worlds it only
		 *        becomes darker under 0.
		 * @param worldGamemode
		 *        Default's world gamemode. If the player's gamemode is different from the default's one a {SetPlayerGameType}
		 *        should be sent after this.
		 * @param difficulty
		 *        World's difficulty. The value is visible in the client's world settings.
		 * @param spawnPosition
		 *        Position where the client's compass will point to.
		 * @param time
		 *        Time of the day that should be in a range from 0 to 24000. If not the absolute value is moduled per 24000.
		 *        
		 *        If the world's time is stopped a {SetTime} packet should be sent after this.
		 * @param edition
		 *        Game's edition. Some behaviours (some entities for example) may only work in a version and not in
		 *        the other.
		 * @param rainLevel
		 *        Intensity of the rain or the snow. Any value lower than or equals to 0 means no rain.
		 * @param commandsEnabled
		 *        Indicates whether the cheats are enabled. If the cheats are disabled the player cannot send commands.
		 * @param worldName
		 *        World's name that will be displayed in the game's world settings. It can contain formatting codes.
		 */
		constructor(entityId=0, runtimeId=0, position={x:0,y:0,z:0}, yaw=.0, pitch=.0, seed=0, dimension=0, generator=1, worldGamemode=0, difficulty=0, spawnPosition={x:0,y:0,z:0}, loadedInCreative=false, time=0, edition=0, rainLevel=.0, lightningLevel=.0, commandsEnabled=false, textureRequired=false, levelId="", worldName="") {
			super();
			this.entityId = entityId;
			this.runtimeId = runtimeId;
			this.position = position;
			this.yaw = yaw;
			this.pitch = pitch;
			this.seed = seed;
			this.dimension = dimension;
			this.generator = generator;
			this.worldGamemode = worldGamemode;
			this.difficulty = difficulty;
			this.spawnPosition = spawnPosition;
			this.loadedInCreative = loadedInCreative;
			this.time = time;
			this.edition = edition;
			this.rainLevel = rainLevel;
			this.lightningLevel = lightningLevel;
			this.commandsEnabled = commandsEnabled;
			this.textureRequired = textureRequired;
			this.levelId = levelId;
			this.worldName = worldName;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(12);
			this.writeVarlong(this.entityId);
			this.writeVarlong(this.runtimeId);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeLittleEndianFloat(this.yaw);
			this.writeLittleEndianFloat(this.pitch);
			this.writeVarint(this.seed);
			this.writeVarint(this.dimension);
			this.writeVarint(this.generator);
			this.writeVarint(this.worldGamemode);
			this.writeVarint(this.difficulty);
			this.writeVarint(this.spawnPosition.x); this.writeVarint(this.spawnPosition.y); this.writeVarint(this.spawnPosition.z);
			this.writeBigEndianByte(this.loadedInCreative?1:0);
			this.writeVarint(this.time);
			this.writeBigEndianByte(this.edition);
			this.writeLittleEndianFloat(this.rainLevel);
			this.writeLittleEndianFloat(this.lightningLevel);
			this.writeBigEndianByte(this.commandsEnabled?1:0);
			this.writeBigEndianByte(this.textureRequired?1:0);
			var dhc5zzbl=this.encodeString(this.levelId); this.writeVaruint(dhc5zzbl.length); this.writeBytes(dhc5zzbl);
			var dhc5bjz5=this.encodeString(this.worldName); this.writeVaruint(dhc5bjz5.length); this.writeBytes(dhc5bjz5);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.runtimeId=this.readVarlong();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.yaw=this.readLittleEndianFloat();
			this.pitch=this.readLittleEndianFloat();
			this.seed=this.readVarint();
			this.dimension=this.readVarint();
			this.generator=this.readVarint();
			this.worldGamemode=this.readVarint();
			this.difficulty=this.readVarint();
			this.spawnPosition={}; this.spawnPosition.x=this.readVarint(); this.spawnPosition.y=this.readVarint(); this.spawnPosition.z=this.readVarint();
			this.loadedInCreative=this.readBigEndianByte()!==0;
			this.time=this.readVarint();
			this.edition=this.readBigEndianByte();
			this.rainLevel=this.readLittleEndianFloat();
			this.lightningLevel=this.readLittleEndianFloat();
			this.commandsEnabled=this.readBigEndianByte()!==0;
			this.textureRequired=this.readBigEndianByte()!==0;
			this.levelId=this.decodeString(this.readBytes(this.readVaruint()));
			this.worldName=this.decodeString(this.readBytes(this.readVaruint()));
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.StartGame().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "StartGame(entityId: " + this.entityId + ", runtimeId: " + this.runtimeId + ", position: " + this.position + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", seed: " + this.seed + ", dimension: " + this.dimension + ", generator: " + this.generator + ", worldGamemode: " + this.worldGamemode + ", difficulty: " + this.difficulty + ", spawnPosition: " + this.spawnPosition + ", loadedInCreative: " + this.loadedInCreative + ", time: " + this.time + ", edition: " + this.edition + ", rainLevel: " + this.rainLevel + ", lightningLevel: " + this.lightningLevel + ", commandsEnabled: " + this.commandsEnabled + ", textureRequired: " + this.textureRequired + ", levelId: " + this.levelId + ", worldName: " + this.worldName + ")";
		}

	},

	/**
	 * Spawns a player after adding it to the player's list using PlayerList. If PlayerList
	 * is sent after this packet the player will appear to have the same skin as the player
	 * who receives this packet.
	 * Spawning a player to itself (using the same entity id given in the StartGame packet)
	 * will crash the client's game.
	 */
	AddPlayer: class extends Buffer {

		static get ID(){ return 13; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		/**
		 * @param uuid
		 *        Player's UUID, should match an UUID of a player in the list added through {PlayerList}.
		 * @param username
		 *        Player's username and text displayed on the nametag if something else is not specified in the metadata.
		 */
		constructor(uuid=new Uint8Array(16), username="", entityId=0, runtimeId=0, position={x:0,y:0,z:0}, motion={x:0,y:0,z:0}, pitch=.0, headYaw=.0, yaw=.0, heldItem=null, metadata=new Metadata()) {
			super();
			this.uuid = uuid;
			this.username = username;
			this.entityId = entityId;
			this.runtimeId = runtimeId;
			this.position = position;
			this.motion = motion;
			this.pitch = pitch;
			this.headYaw = headYaw;
			this.yaw = yaw;
			this.heldItem = heldItem;
			this.metadata = metadata;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(13);
			this.writeBytes(this.uuid);
			var dhc5cvbf=this.encodeString(this.username); this.writeVaruint(dhc5cvbf.length); this.writeBytes(dhc5cvbf);
			this.writeVarlong(this.entityId);
			this.writeVarlong(this.runtimeId);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeLittleEndianFloat(this.motion.x); this.writeLittleEndianFloat(this.motion.y); this.writeLittleEndianFloat(this.motion.z);
			this.writeLittleEndianFloat(this.pitch);
			this.writeLittleEndianFloat(this.headYaw);
			this.writeLittleEndianFloat(this.yaw);
			this.writeBytes(this.heldItem.encode());
			this.writeBytes(this.metadata.encode());
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.uuid=this.readBytes(16);
			this.username=this.decodeString(this.readBytes(this.readVaruint()));
			this.entityId=this.readVarlong();
			this.runtimeId=this.readVarlong();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.motion={}; this.motion.x=this.readLittleEndianFloat(); this.motion.y=this.readLittleEndianFloat(); this.motion.z=this.readLittleEndianFloat();
			this.pitch=this.readLittleEndianFloat();
			this.headYaw=this.readLittleEndianFloat();
			this.yaw=this.readLittleEndianFloat();
			this.heldItem=Types.Slot.fromBuffer(this._buffer); this._buffer=this.heldItem._buffer;
			this.metadata=Metadata.fromBuffer(this._buffer); this._buffer=this.metadata._buffer;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.AddPlayer().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "AddPlayer(uuid: " + this.uuid + ", username: " + this.username + ", entityId: " + this.entityId + ", runtimeId: " + this.runtimeId + ", position: " + this.position + ", motion: " + this.motion + ", pitch: " + this.pitch + ", headYaw: " + this.headYaw + ", yaw: " + this.yaw + ", heldItem: " + this.heldItem + ", metadata: " + this.metadata + ")";
		}

	},

	AddEntity: class extends Buffer {

		static get ID(){ return 14; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, runtimeId=0, type=0, position={x:0,y:0,z:0}, motion={x:0,y:0,z:0}, pitch=.0, yaw=.0, attributes=[], metadata=new Metadata(), links=[]) {
			super();
			this.entityId = entityId;
			this.runtimeId = runtimeId;
			this.type = type;
			this.position = position;
			this.motion = motion;
			this.pitch = pitch;
			this.yaw = yaw;
			this.attributes = attributes;
			this.metadata = metadata;
			this.links = links;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(14);
			this.writeVarlong(this.entityId);
			this.writeVarlong(this.runtimeId);
			this.writeVaruint(this.type);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeLittleEndianFloat(this.motion.x); this.writeLittleEndianFloat(this.motion.y); this.writeLittleEndianFloat(this.motion.z);
			this.writeLittleEndianFloat(this.pitch);
			this.writeLittleEndianFloat(this.yaw);
			this.writeVaruint(this.attributes.length); for(var dhc5draj in this.attributes){ this.writeBytes(this.attributes[dhc5draj].encode()); }
			this.writeBytes(this.metadata.encode());
			this.writeVaruint(this.links.length); for(var dhc5a5c in this.links){ this.writeBytes(this.links[dhc5a5c].encode()); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.runtimeId=this.readVarlong();
			this.type=this.readVaruint();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.motion={}; this.motion.x=this.readLittleEndianFloat(); this.motion.y=this.readLittleEndianFloat(); this.motion.z=this.readLittleEndianFloat();
			this.pitch=this.readLittleEndianFloat();
			this.yaw=this.readLittleEndianFloat();
			var aramyrcl=this.readVaruint(); this.attributes=[]; for(var dhc5draj=0;dhc5draj<aramyrcl;dhc5draj++){ this.attributes[dhc5draj]=Types.Attribute.fromBuffer(this._buffer); this._buffer=this.attributes[dhc5draj]._buffer; }
			this.metadata=Metadata.fromBuffer(this._buffer); this._buffer=this.metadata._buffer;
			var aramblam=this.readVaruint(); this.links=[]; for(var dhc5a5c=0;dhc5a5c<aramblam;dhc5a5c++){ this.links[dhc5a5c]=Types.Link.fromBuffer(this._buffer); this._buffer=this.links[dhc5a5c]._buffer; }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.AddEntity().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "AddEntity(entityId: " + this.entityId + ", runtimeId: " + this.runtimeId + ", type: " + this.type + ", position: " + this.position + ", motion: " + this.motion + ", pitch: " + this.pitch + ", yaw: " + this.yaw + ", attributes: " + this.attributes + ", metadata: " + this.metadata + ", links: " + this.links + ")";
		}

	},

	/**
	 * Despawns an entity or a player.
	 */
	RemoveEntity: class extends Buffer {

		static get ID(){ return 15; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0) {
			super();
			this.entityId = entityId;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(15);
			this.writeVarlong(this.entityId);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.RemoveEntity().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "RemoveEntity(entityId: " + this.entityId + ")";
		}

	},

	/**
	 * Spawns a dropped item.
	 */
	AddItemEntity: class extends Buffer {

		static get ID(){ return 16; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, runtimeId=0, item=null, position={x:0,y:0,z:0}, motion={x:0,y:0,z:0}) {
			super();
			this.entityId = entityId;
			this.runtimeId = runtimeId;
			this.item = item;
			this.position = position;
			this.motion = motion;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(16);
			this.writeVarlong(this.entityId);
			this.writeVarlong(this.runtimeId);
			this.writeBytes(this.item.encode());
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeLittleEndianFloat(this.motion.x); this.writeLittleEndianFloat(this.motion.y); this.writeLittleEndianFloat(this.motion.z);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.runtimeId=this.readVarlong();
			this.item=Types.Slot.fromBuffer(this._buffer); this._buffer=this.item._buffer;
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.motion={}; this.motion.x=this.readLittleEndianFloat(); this.motion.y=this.readLittleEndianFloat(); this.motion.z=this.readLittleEndianFloat();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.AddItemEntity().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "AddItemEntity(entityId: " + this.entityId + ", runtimeId: " + this.runtimeId + ", item: " + this.item + ", position: " + this.position + ", motion: " + this.motion + ")";
		}

	},

	AddHangingEntity: class extends Buffer {

		static get ID(){ return 17; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, runtimeId=0, position=null, unknown3=0) {
			super();
			this.entityId = entityId;
			this.runtimeId = runtimeId;
			this.position = position;
			this.unknown3 = unknown3;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(17);
			this.writeVarlong(this.entityId);
			this.writeVarlong(this.runtimeId);
			this.writeBytes(this.position.encode());
			this.writeVarint(this.unknown3);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.runtimeId=this.readVarlong();
			this.position=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.position._buffer;
			this.unknown3=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.AddHangingEntity().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "AddHangingEntity(entityId: " + this.entityId + ", runtimeId: " + this.runtimeId + ", position: " + this.position + ", unknown3: " + this.unknown3 + ")";
		}

	},

	/**
	 * Plays the collection animation and despawns the entity that has been collected.
	 */
	TakeItemEntity: class extends Buffer {

		static get ID(){ return 18; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		/**
		 * @param collected
		 *        Collected entity, usually an item entity or an arrow, that will float toward the collector and despawn.
		 * @param collector
		 *        Entity that collects, usually a player or another entity with an inventory.
		 */
		constructor(collected=0, collector=0) {
			super();
			this.collected = collected;
			this.collector = collector;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(18);
			this.writeVarlong(this.collected);
			this.writeVarlong(this.collector);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.collected=this.readVarlong();
			this.collector=this.readVarlong();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.TakeItemEntity().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "TakeItemEntity(collected: " + this.collected + ", collector: " + this.collector + ")";
		}

	},

	MoveEntity: class extends Buffer {

		static get ID(){ return 19; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, position={x:0,y:0,z:0}, pitch=0, headYaw=0, yaw=0) {
			super();
			this.entityId = entityId;
			this.position = position;
			this.pitch = pitch;
			this.headYaw = headYaw;
			this.yaw = yaw;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(19);
			this.writeVarlong(this.entityId);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeBigEndianByte(this.pitch);
			this.writeBigEndianByte(this.headYaw);
			this.writeBigEndianByte(this.yaw);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.pitch=this.readBigEndianByte();
			this.headYaw=this.readBigEndianByte();
			this.yaw=this.readBigEndianByte();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.MoveEntity().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "MoveEntity(entityId: " + this.entityId + ", position: " + this.position + ", pitch: " + this.pitch + ", headYaw: " + this.headYaw + ", yaw: " + this.yaw + ")";
		}

	},

	MovePlayer: class extends Buffer {

		static get ID(){ return 20; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		// animation
		static get FULL(){ return 0; }
		static get NONE(){ return 1; }
		static get ROTATION(){ return 2; }

		constructor(entityId=0, position={x:0,y:0,z:0}, pitch=.0, headYaw=.0, yaw=.0, animation=0, onGround=false) {
			super();
			this.entityId = entityId;
			this.position = position;
			this.pitch = pitch;
			this.headYaw = headYaw;
			this.yaw = yaw;
			this.animation = animation;
			this.onGround = onGround;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(20);
			this.writeVarlong(this.entityId);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeLittleEndianFloat(this.pitch);
			this.writeLittleEndianFloat(this.headYaw);
			this.writeLittleEndianFloat(this.yaw);
			this.writeBigEndianByte(this.animation);
			this.writeBigEndianByte(this.onGround?1:0);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.pitch=this.readLittleEndianFloat();
			this.headYaw=this.readLittleEndianFloat();
			this.yaw=this.readLittleEndianFloat();
			this.animation=this.readBigEndianByte();
			this.onGround=this.readBigEndianByte()!==0;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.MovePlayer().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "MovePlayer(entityId: " + this.entityId + ", position: " + this.position + ", pitch: " + this.pitch + ", headYaw: " + this.headYaw + ", yaw: " + this.yaw + ", animation: " + this.animation + ", onGround: " + this.onGround + ")";
		}

	},

	RiderJump: class extends Buffer {

		static get ID(){ return 21; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		constructor(rider=0) {
			super();
			this.rider = rider;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(21);
			this.writeVarlong(this.rider);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.rider=this.readVarlong();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.RiderJump().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "RiderJump(rider: " + this.rider + ")";
		}

	},

	/**
	 * Instantly removes a block, either because the player is in creative mode or because
	 * the target block's hardness is 0 or lower (after all enchantments are applied).
	 */
	RemoveBlock: class extends Buffer {

		static get ID(){ return 22; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(position=null) {
			super();
			this.position = position;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(22);
			this.writeBytes(this.position.encode());
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.position=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.position._buffer;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.RemoveBlock().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "RemoveBlock(position: " + this.position + ")";
		}

	},

	UpdateBlock: class extends Buffer {

		static get ID(){ return 23; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// flags and meta
		static get NEIGHBORS(){ return 1; }
		static get NETWORK(){ return 2; }
		static get NO_GRAPHIC(){ return 4; }
		static get PRIORITY(){ return 8; }

		constructor(position=null, block=0, flagsAndMeta=0) {
			super();
			this.position = position;
			this.block = block;
			this.flagsAndMeta = flagsAndMeta;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(23);
			this.writeBytes(this.position.encode());
			this.writeVaruint(this.block);
			this.writeVaruint(this.flagsAndMeta);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.position=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.position._buffer;
			this.block=this.readVaruint();
			this.flagsAndMeta=this.readVaruint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.UpdateBlock().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "UpdateBlock(position: " + this.position + ", block: " + this.block + ", flagsAndMeta: " + this.flagsAndMeta + ")";
		}

	},

	/**
	 * Spawns a painting entity in the world.
	 */
	AddPainting: class extends Buffer {

		static get ID(){ return 24; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, runtimeId=0, position=null, direction=0, title="") {
			super();
			this.entityId = entityId;
			this.runtimeId = runtimeId;
			this.position = position;
			this.direction = direction;
			this.title = title;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(24);
			this.writeVarlong(this.entityId);
			this.writeVarlong(this.runtimeId);
			this.writeBytes(this.position.encode());
			this.writeVarint(this.direction);
			var dhc5arz=this.encodeString(this.title); this.writeVaruint(dhc5arz.length); this.writeBytes(dhc5arz);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.runtimeId=this.readVarlong();
			this.position=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.position._buffer;
			this.direction=this.readVarint();
			this.title=this.decodeString(this.readBytes(this.readVaruint()));
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.AddPainting().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "AddPainting(entityId: " + this.entityId + ", runtimeId: " + this.runtimeId + ", position: " + this.position + ", direction: " + this.direction + ", title: " + this.title + ")";
		}

	},

	Explode: class extends Buffer {

		static get ID(){ return 25; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position={x:0,y:0,z:0}, radius=.0, destroyedBlocks=[]) {
			super();
			this.position = position;
			this.radius = radius;
			this.destroyedBlocks = destroyedBlocks;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(25);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeLittleEndianFloat(this.radius);
			this.writeVaruint(this.destroyedBlocks.length); for(var dhc5znc9 in this.destroyedBlocks){ this.writeBytes(this.destroyedBlocks[dhc5znc9].encode()); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.radius=this.readLittleEndianFloat();
			var aramzvdj=this.readVaruint(); this.destroyedBlocks=[]; for(var dhc5znc9=0;dhc5znc9<aramzvdj;dhc5znc9++){ this.destroyedBlocks[dhc5znc9]=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.destroyedBlocks[dhc5znc9]._buffer; }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.Explode().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Explode(position: " + this.position + ", radius: " + this.radius + ", destroyedBlocks: " + this.destroyedBlocks + ")";
		}

	},

	/**
	 * Plays a sound at a certain position.
	 */
	LevelSoundEvent: class extends Buffer {

		static get ID(){ return 26; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		// sound
		static get ITEM_USE_ON(){ return 0; }
		static get HIT(){ return 1; }
		static get STEP(){ return 2; }
		static get JUMP(){ return 3; }
		static get BREAK(){ return 4; }
		static get PLACE(){ return 5; }
		static get HEAVY_STEP(){ return 6; }
		static get GALLOP(){ return 7; }
		static get FALL(){ return 8; }
		static get AMBIENT(){ return 9; }
		static get AMBIENT_BABY(){ return 10; }
		static get AMBIENT_IN_WATER(){ return 11; }
		static get BREATHE(){ return 12; }
		static get DEATH(){ return 13; }
		static get DEATH_IN_WATER(){ return 14; }
		static get DEATH_TO_ZOMBIE(){ return 15; }
		static get HURT(){ return 16; }
		static get HURT_IN_WATER(){ return 17; }
		static get MAD(){ return 18; }
		static get BOOST(){ return 19; }
		static get BOW(){ return 20; }
		static get SQUISH_BIG(){ return 21; }
		static get SQUISH_SMALL(){ return 22; }
		static get FALL_BIG(){ return 23; }
		static get FALL_SMALL(){ return 24; }
		static get SPLASH(){ return 25; }
		static get FIZZ(){ return 26; }
		static get FLAP(){ return 27; }
		static get SWIM(){ return 28; }
		static get DRINK(){ return 29; }
		static get EAT(){ return 30; }
		static get TAKEOFF(){ return 31; }
		static get SHAKE(){ return 32; }
		static get PLOP(){ return 33; }
		static get LAND(){ return 34; }
		static get SADDLE(){ return 35; }
		static get ARMOR(){ return 36; }
		static get ADD_CHEST(){ return 37; }
		static get THROW(){ return 38; }
		static get ATTACK(){ return 39; }
		static get ATTACK_NODAMAGE(){ return 40; }
		static get WARN(){ return 41; }
		static get SHEAR(){ return 42; }
		static get MILK(){ return 43; }
		static get THUNDER(){ return 44; }
		static get EXPLODE(){ return 45; }
		static get FIRE(){ return 46; }
		static get IGNITE(){ return 47; }
		static get FUSE(){ return 48; }
		static get STARE(){ return 49; }
		static get SPAWN(){ return 50; }
		static get SHOOT(){ return 51; }
		static get BREAK_BLOCK(){ return 52; }
		static get REMEDY(){ return 53; }
		static get UNFECT(){ return 54; }
		static get LEVELUP(){ return 55; }
		static get BOW_HIT(){ return 56; }
		static get BULLET_HIT(){ return 57; }
		static get EXTINGUISH_FIRE(){ return 58; }
		static get ITEM_FIZZ(){ return 59; }
		static get CHEST_OPEN(){ return 60; }
		static get CHEST_CLOSED(){ return 61; }
		static get POWER_ON(){ return 62; }
		static get POWER_OFF(){ return 63; }
		static get ATTACH(){ return 64; }
		static get DETACH(){ return 65; }
		static get DENY(){ return 66; }
		static get TRIPOD(){ return 67; }
		static get POP(){ return 68; }
		static get DROP_SLOT(){ return 69; }
		static get NOTE(){ return 70; }
		static get THORNS(){ return 71; }
		static get PISTON_IN(){ return 72; }
		static get PISTON_OUT(){ return 73; }
		static get PORTAL(){ return 74; }
		static get WATER(){ return 75; }
		static get LAVA_POP(){ return 76; }
		static get LAVA(){ return 77; }
		static get BURP(){ return 78; }
		static get BUCKET_FILL_WATER(){ return 79; }
		static get BUCKET_FILL_LAVA(){ return 80; }
		static get BUCKET_EMPTY_WATER(){ return 81; }
		static get BUCKET_EMPTY_LAVA(){ return 82; }
		static get GUARDIAN_FLOP(){ return 83; }
		static get ELDERGUARDIAN_CURSE(){ return 84; }
		static get MOB_WARNING(){ return 85; }
		static get MOB_WARNING_BABY(){ return 86; }
		static get TELEPORT(){ return 87; }
		static get SHULKER_OPEN(){ return 88; }
		static get SHULKER_CLOSE(){ return 89; }
		static get DEFAULT(){ return 90; }
		static get UNDEFINED(){ return 91; }

		/**
		 * @param position
		 *        Position where the sound was generated. The closer to the player the more intense will be on the client.
		 */
		constructor(sound=0, position={x:0,y:0,z:0}, volume=0, pitch=0, unknown4=false) {
			super();
			this.sound = sound;
			this.position = position;
			this.volume = volume;
			this.pitch = pitch;
			this.unknown4 = unknown4;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(26);
			this.writeBigEndianByte(this.sound);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeVaruint(this.volume);
			this.writeVarint(this.pitch);
			this.writeBigEndianByte(this.unknown4?1:0);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.sound=this.readBigEndianByte();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.volume=this.readVaruint();
			this.pitch=this.readVarint();
			this.unknown4=this.readBigEndianByte()!==0;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.LevelSoundEvent().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "LevelSoundEvent(sound: " + this.sound + ", position: " + this.position + ", volume: " + this.volume + ", pitch: " + this.pitch + ", unknown4: " + this.unknown4 + ")";
		}

	},

	LevelEvent: class extends Buffer {

		static get ID(){ return 27; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// event id
		static get START_RAIN(){ return 3001; }
		static get START_THUNDER(){ return 3002; }
		static get STOP_RAIN(){ return 3003; }
		static get STOP_THUNDER(){ return 3004; }
		static get SET_DATA(){ return 4000; }
		static get PLAYERS_SLEEPING(){ return 9800; }
		static get BUBBLE(){ return 16385; }
		static get CRITICAL(){ return 16386; }
		static get BLOCK_FORCE_FIELD(){ return 16387; }
		static get SMOKE(){ return 16388; }
		static get EXPLODE(){ return 16389; }
		static get EVAPORATION(){ return 16390; }
		static get FLAME(){ return 16391; }
		static get LAVA(){ return 16392; }
		static get LARGE_SMOKE(){ return 16393; }
		static get REDSTONE(){ return 16394; }
		static get RISING_RED_DUST(){ return 16395; }
		static get ITEM_BREAK(){ return 16396; }
		static get SNOWBALL_POOF(){ return 16397; }
		static get HUGE_EXPLODE(){ return 16398; }
		static get HUGE_EXPLODE_SEED(){ return 16399; }
		static get MOB_FLAME(){ return 16400; }
		static get HEART(){ return 16401; }
		static get TERRAIN(){ return 16402; }
		static get TOWN_AURA(){ return 16403; }
		static get PORTAL(){ return 16404; }
		static get WATER_SPLASH(){ return 16405; }
		static get WATER_WAKE(){ return 16406; }
		static get DRIP_WATER(){ return 16407; }
		static get DRIP_LAVA(){ return 16408; }
		static get FALLING_DUST(){ return 16409; }
		static get MOB_SPELL(){ return 16410; }
		static get MOB_SPELL_AMBIENT(){ return 16411; }
		static get MOB_SPELL_INSTANTANEOUS(){ return 16412; }
		static get INK(){ return 16413; }
		static get SLIME(){ return 16414; }
		static get RAIN_SPLASH(){ return 16415; }
		static get VILLAGER_ANGRY(){ return 16416; }
		static get VILLAGER_HAPPY(){ return 16417; }
		static get ENCHANTMENT_TABLE(){ return 16418; }
		static get TRACKING_EMITTER(){ return 16419; }
		static get NOTE(){ return 16420; }
		static get WITCH_SPELL(){ return 16421; }
		static get CARROT(){ return 16422; }
		static get END_ROD(){ return 16424; }
		static get DRAGON_BREATH(){ return 16425; }
		static get SHOOT(){ return 2000; }
		static get DESTROY(){ return 2001; }

		constructor(eventId=0, position={x:0,y:0,z:0}, data=0) {
			super();
			this.eventId = eventId;
			this.position = position;
			this.data = data;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(27);
			this.writeVarint(this.eventId);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeVarint(this.data);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.eventId=this.readVarint();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.data=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.LevelEvent().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "LevelEvent(eventId: " + this.eventId + ", position: " + this.position + ", data: " + this.data + ")";
		}

	},

	BlockEvent: class extends Buffer {

		static get ID(){ return 28; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position=null, data=new Int32Array(2)) {
			super();
			this.position = position;
			this.data = data;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(28);
			this.writeBytes(this.position.encode());
			for(var dhc5yr in this.data){ this.writeVarint(this.data[dhc5yr]); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.position=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.position._buffer;
			var aramzfy=2; this.data=[]; for(var dhc5yr=0;dhc5yr<aramzfy;dhc5yr++){ this.data[dhc5yr]=this.readVarint(); }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.BlockEvent().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "BlockEvent(position: " + this.position + ", data: " + this.data + ")";
		}

	},

	EntityEvent: class extends Buffer {

		static get ID(){ return 29; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		// event id
		static get HURT_ANIMATION(){ return 2; }
		static get DEATH_ANIMATION(){ return 3; }
		static get TAME_FAIL(){ return 6; }
		static get TAME_SUCCESS(){ return 7; }
		static get SHAKE_WET(){ return 8; }
		static get USE_ITEM(){ return 9; }
		static get EAT_GRASS_ANIMATION(){ return 10; }
		static get FISH_HOOK_BUBBLES(){ return 11; }
		static get FISH_HOOK_POSITION(){ return 12; }
		static get FISH_HOOK_HOOK(){ return 13; }
		static get FISH_HOOK_TEASE(){ return 14; }
		static get SQUID_INK_CLOUD(){ return 15; }
		static get AMBIENT_SOUND(){ return 16; }
		static get RESPAWN(){ return 17; }

		constructor(entityId=0, eventId=0, unknown2=0) {
			super();
			this.entityId = entityId;
			this.eventId = eventId;
			this.unknown2 = unknown2;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(29);
			this.writeVarlong(this.entityId);
			this.writeBigEndianByte(this.eventId);
			this.writeVarint(this.unknown2);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.eventId=this.readBigEndianByte();
			this.unknown2=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.EntityEvent().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityEvent(entityId: " + this.entityId + ", eventId: " + this.eventId + ", unknown2: " + this.unknown2 + ")";
		}

	},

	MobEffect: class extends Buffer {

		static get ID(){ return 30; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// event id
		static get ADD(){ return 1; }
		static get MODIFY(){ return 2; }
		static get REMOVE(){ return 3; }

		constructor(entityId=0, eventId=0, effect=0, amplifier=0, particles=false, duration=0) {
			super();
			this.entityId = entityId;
			this.eventId = eventId;
			this.effect = effect;
			this.amplifier = amplifier;
			this.particles = particles;
			this.duration = duration;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(30);
			this.writeVarlong(this.entityId);
			this.writeBigEndianByte(this.eventId);
			this.writeVarint(this.effect);
			this.writeVarint(this.amplifier);
			this.writeBigEndianByte(this.particles?1:0);
			this.writeVarint(this.duration);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.eventId=this.readBigEndianByte();
			this.effect=this.readVarint();
			this.amplifier=this.readVarint();
			this.particles=this.readBigEndianByte()!==0;
			this.duration=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.MobEffect().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "MobEffect(entityId: " + this.entityId + ", eventId: " + this.eventId + ", effect: " + this.effect + ", amplifier: " + this.amplifier + ", particles: " + this.particles + ", duration: " + this.duration + ")";
		}

	},

	/**
	 * Updates an entity's attributes. This packet should be used when a value must be
	 * modified but it cannot be done using another packet (for example controlling the
	 * player's experience and level).
	 */
	UpdateAttributes: class extends Buffer {

		static get ID(){ return 31; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, attributes=[]) {
			super();
			this.entityId = entityId;
			this.attributes = attributes;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(31);
			this.writeVarlong(this.entityId);
			this.writeVaruint(this.attributes.length); for(var dhc5draj in this.attributes){ this.writeBytes(this.attributes[dhc5draj].encode()); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			var aramyrcl=this.readVaruint(); this.attributes=[]; for(var dhc5draj=0;dhc5draj<aramyrcl;dhc5draj++){ this.attributes[dhc5draj]=Types.Attribute.fromBuffer(this._buffer); this._buffer=this.attributes[dhc5draj]._buffer; }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.UpdateAttributes().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "UpdateAttributes(entityId: " + this.entityId + ", attributes: " + this.attributes + ")";
		}

	},

	/**
	 * Sent when the client puts an item in its hotbar or selects a new hotbar slot.
	 */
	MobEquipment: class extends Buffer {

		static get ID(){ return 32; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		/**
		 * @param inventorySlot
		 *        Slot of the inventory where the item is. The hotbat slots (0-8) are not counted. 255 means that a generic
		 *        empty slot has been selected.
		 * @param hotbarSlot
		 *        Slot of the hotbar where the item is being moved.
		 */
		constructor(entityId=0, item=null, inventorySlot=0, hotbarSlot=0, unknown4=0) {
			super();
			this.entityId = entityId;
			this.item = item;
			this.inventorySlot = inventorySlot;
			this.hotbarSlot = hotbarSlot;
			this.unknown4 = unknown4;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(32);
			this.writeVarlong(this.entityId);
			this.writeBytes(this.item.encode());
			this.writeBigEndianByte(this.inventorySlot);
			this.writeBigEndianByte(this.hotbarSlot);
			this.writeBigEndianByte(this.unknown4);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.item=Types.Slot.fromBuffer(this._buffer); this._buffer=this.item._buffer;
			this.inventorySlot=this.readBigEndianByte();
			this.hotbarSlot=this.readBigEndianByte();
			this.unknown4=this.readBigEndianByte();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.MobEquipment().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "MobEquipment(entityId: " + this.entityId + ", item: " + this.item + ", inventorySlot: " + this.inventorySlot + ", hotbarSlot: " + this.hotbarSlot + ", unknown4: " + this.unknown4 + ")";
		}

	},

	MobArmorEquipment: class extends Buffer {

		static get ID(){ return 33; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		constructor(entityId=0, armor=[]) {
			super();
			this.entityId = entityId;
			this.armor = armor;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(33);
			this.writeVarlong(this.entityId);
			for(var dhc5c1c in this.armor){ this.writeBytes(this.armor[dhc5c1c].encode()); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			var aramyjbi=4; this.armor=[]; for(var dhc5c1c=0;dhc5c1c<aramyjbi;dhc5c1c++){ this.armor[dhc5c1c]=Types.Slot.fromBuffer(this._buffer); this._buffer=this.armor[dhc5c1c]._buffer; }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.MobArmorEquipment().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "MobArmorEquipment(entityId: " + this.entityId + ", armor: " + this.armor + ")";
		}

	},

	Interact: class extends Buffer {

		static get ID(){ return 34; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		// action
		static get INTERACT(){ return 1; }
		static get ATTACK(){ return 2; }
		static get LEAVE_VEHICLE(){ return 3; }
		static get HOVER(){ return 4; }

		constructor(action=0, target=0) {
			super();
			this.action = action;
			this.target = target;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(34);
			this.writeBigEndianByte(this.action);
			this.writeVarlong(this.target);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.action=this.readBigEndianByte();
			this.target=this.readVarlong();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.Interact().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Interact(action: " + this.action + ", target: " + this.target + ")";
		}

	},

	UseItem: class extends Buffer {

		static get ID(){ return 35; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(blockPosition=null, hotbarSlot=0, face=0, facePosition={x:0,y:0,z:0}, position={x:0,y:0,z:0}, slot=0, item=null) {
			super();
			this.blockPosition = blockPosition;
			this.hotbarSlot = hotbarSlot;
			this.face = face;
			this.facePosition = facePosition;
			this.position = position;
			this.slot = slot;
			this.item = item;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(35);
			this.writeBytes(this.blockPosition.encode());
			this.writeVaruint(this.hotbarSlot);
			this.writeVarint(this.face);
			this.writeLittleEndianFloat(this.facePosition.x); this.writeLittleEndianFloat(this.facePosition.y); this.writeLittleEndianFloat(this.facePosition.z);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeVarint(this.slot);
			this.writeBytes(this.item.encode());
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.blockPosition=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.blockPosition._buffer;
			this.hotbarSlot=this.readVaruint();
			this.face=this.readVarint();
			this.facePosition={}; this.facePosition.x=this.readLittleEndianFloat(); this.facePosition.y=this.readLittleEndianFloat(); this.facePosition.z=this.readLittleEndianFloat();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.slot=this.readVarint();
			this.item=Types.Slot.fromBuffer(this._buffer); this._buffer=this.item._buffer;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.UseItem().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "UseItem(blockPosition: " + this.blockPosition + ", hotbarSlot: " + this.hotbarSlot + ", face: " + this.face + ", facePosition: " + this.facePosition + ", position: " + this.position + ", slot: " + this.slot + ", item: " + this.item + ")";
		}

	},

	PlayerAction: class extends Buffer {

		static get ID(){ return 36; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		// action
		static get START_BREAK(){ return 0; }
		static get ABORT_BREAK(){ return 1; }
		static get STOP_BREAK(){ return 2; }
		static get RELEASE_ITEM(){ return 5; }
		static get STOP_SLEEPING(){ return 6; }
		static get RESPAWN(){ return 7; }
		static get JUMP(){ return 8; }
		static get START_SPRINT(){ return 9; }
		static get STOP_SPRINT(){ return 10; }
		static get START_SNEAK(){ return 11; }
		static get STOP_SNEAK(){ return 12; }
		static get START_GLIDING(){ return 15; }
		static get STOP_GLIDING(){ return 16; }

		constructor(entityId=0, action=0, position=null, face=0) {
			super();
			this.entityId = entityId;
			this.action = action;
			this.position = position;
			this.face = face;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(36);
			this.writeVarlong(this.entityId);
			this.writeVarint(this.action);
			this.writeBytes(this.position.encode());
			this.writeVarint(this.face);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.action=this.readVarint();
			this.position=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.position._buffer;
			this.face=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.PlayerAction().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "PlayerAction(entityId: " + this.entityId + ", action: " + this.action + ", position: " + this.position + ", face: " + this.face + ")";
		}

	},

	/**
	 * Sent by the player when it falls from a distance that causes damage, that can be
	 * influenced by its armour and its effects.
	 */
	PlayerFall: class extends Buffer {

		static get ID(){ return 37; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		/**
		 * @param distance
		 *        Number of blocks the player has been in free falling before hitting the ground.
		 */
		constructor(distance=.0) {
			super();
			this.distance = distance;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(37);
			this.writeLittleEndianFloat(this.distance);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.distance=this.readLittleEndianFloat();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.PlayerFall().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "PlayerFall(distance: " + this.distance + ")";
		}

	},

	HurtArmor: class extends Buffer {

		static get ID(){ return 38; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(unknown0=0) {
			super();
			this.unknown0 = unknown0;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(38);
			this.writeVarint(this.unknown0);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.unknown0=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.HurtArmor().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "HurtArmor(unknown0: " + this.unknown0 + ")";
		}

	},

	/**
	 * Updates an entity's metadata.
	 */
	SetEntityData: class extends Buffer {

		static get ID(){ return 39; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, metadata=new Metadata()) {
			super();
			this.entityId = entityId;
			this.metadata = metadata;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(39);
			this.writeVarlong(this.entityId);
			this.writeBytes(this.metadata.encode());
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.metadata=Metadata.fromBuffer(this._buffer); this._buffer=this.metadata._buffer;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.SetEntityData().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetEntityData(entityId: " + this.entityId + ", metadata: " + this.metadata + ")";
		}

	},

	/**
	 * Updates an entity's motion.
	 */
	SetEntityMotion: class extends Buffer {

		static get ID(){ return 40; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		/**
		 * @param entityId
		 *        Entity which motion is updated. If the entity id is the player's, its motion is updated client-side
		 *        and the player will send movement packets to the server (meaning that the server has no physical
		 *        calculations to do). If not an animation will be done client-side but the server will have to calculate
		 *        the new position applying the item's movement rules.
		 * @param motion
		 *        New motion for the entity that will influence its movement.
		 */
		constructor(entityId=0, motion={x:0,y:0,z:0}) {
			super();
			this.entityId = entityId;
			this.motion = motion;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(40);
			this.writeVarlong(this.entityId);
			this.writeLittleEndianFloat(this.motion.x); this.writeLittleEndianFloat(this.motion.y); this.writeLittleEndianFloat(this.motion.z);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.motion={}; this.motion.x=this.readLittleEndianFloat(); this.motion.y=this.readLittleEndianFloat(); this.motion.z=this.readLittleEndianFloat();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.SetEntityMotion().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetEntityMotion(entityId: " + this.entityId + ", motion: " + this.motion + ")";
		}

	},

	SetEntityLink: class extends Buffer {

		static get ID(){ return 41; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// action
		static get ADD(){ return 0; }
		static get RIDE(){ return 1; }
		static get REMOVE(){ return 2; }

		constructor(from=0, to=0, action=0) {
			super();
			this.from = from;
			this.to = to;
			this.action = action;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(41);
			this.writeVarlong(this.from);
			this.writeVarlong(this.to);
			this.writeBigEndianByte(this.action);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.from=this.readVarlong();
			this.to=this.readVarlong();
			this.action=this.readBigEndianByte();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.SetEntityLink().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetEntityLink(from: " + this.from + ", to: " + this.to + ", action: " + this.action + ")";
		}

	},

	SetHealth: class extends Buffer {

		static get ID(){ return 42; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(health=0) {
			super();
			this.health = health;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(42);
			this.writeVarint(this.health);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.health=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.SetHealth().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetHealth(health: " + this.health + ")";
		}

	},

	SetSpawnPosition: class extends Buffer {

		static get ID(){ return 43; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(unknown0=0, position=null, unknown2=false) {
			super();
			this.unknown0 = unknown0;
			this.position = position;
			this.unknown2 = unknown2;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(43);
			this.writeVarint(this.unknown0);
			this.writeBytes(this.position.encode());
			this.writeBigEndianByte(this.unknown2?1:0);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.unknown0=this.readVarint();
			this.position=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.position._buffer;
			this.unknown2=this.readBigEndianByte()!==0;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.SetSpawnPosition().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetSpawnPosition(unknown0: " + this.unknown0 + ", position: " + this.position + ", unknown2: " + this.unknown2 + ")";
		}

	},

	Animate: class extends Buffer {

		static get ID(){ return 44; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		// action
		static get BREAKING(){ return 1; }
		static get WAKE_UP(){ return 3; }

		constructor(action=0, entityId=0) {
			super();
			this.action = action;
			this.entityId = entityId;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(44);
			this.writeVarint(this.action);
			this.writeVarlong(this.entityId);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.action=this.readVarint();
			this.entityId=this.readVarlong();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.Animate().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Animate(action: " + this.action + ", entityId: " + this.entityId + ")";
		}

	},

	Respawn: class extends Buffer {

		static get ID(){ return 45; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position={x:0,y:0,z:0}) {
			super();
			this.position = position;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(45);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.Respawn().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Respawn(position: " + this.position + ")";
		}

	},

	DropItem: class extends Buffer {

		static get ID(){ return 46; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		// action
		static get DROP(){ return 0; }

		constructor(action=0, item=null) {
			super();
			this.action = action;
			this.item = item;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(46);
			this.writeBigEndianByte(this.action);
			this.writeBytes(this.item.encode());
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.action=this.readBigEndianByte();
			this.item=Types.Slot.fromBuffer(this._buffer); this._buffer=this.item._buffer;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.DropItem().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "DropItem(action: " + this.action + ", item: " + this.item + ")";
		}

	},

	InventoryAction: class extends Buffer {

		static get ID(){ return 47; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(action=0, item=null) {
			super();
			this.action = action;
			this.item = item;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(47);
			this.writeVarint(this.action);
			this.writeBytes(this.item.encode());
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.action=this.readVarint();
			this.item=Types.Slot.fromBuffer(this._buffer); this._buffer=this.item._buffer;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.InventoryAction().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "InventoryAction(action: " + this.action + ", item: " + this.item + ")";
		}

	},

	ContainerOpen: class extends Buffer {

		static get ID(){ return 48; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(window=0, type=0, slotCount=0, position=null, entityId=0) {
			super();
			this.window = window;
			this.type = type;
			this.slotCount = slotCount;
			this.position = position;
			this.entityId = entityId;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(48);
			this.writeBigEndianByte(this.window);
			this.writeBigEndianByte(this.type);
			this.writeVarint(this.slotCount);
			this.writeBytes(this.position.encode());
			this.writeVarlong(this.entityId);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.window=this.readBigEndianByte();
			this.type=this.readBigEndianByte();
			this.slotCount=this.readVarint();
			this.position=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.position._buffer;
			this.entityId=this.readVarlong();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ContainerOpen().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ContainerOpen(window: " + this.window + ", type: " + this.type + ", slotCount: " + this.slotCount + ", position: " + this.position + ", entityId: " + this.entityId + ")";
		}

	},

	ContainerClose: class extends Buffer {

		static get ID(){ return 49; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		constructor(window=0) {
			super();
			this.window = window;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(49);
			this.writeBigEndianByte(this.window);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.window=this.readBigEndianByte();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ContainerClose().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ContainerClose(window: " + this.window + ")";
		}

	},

	ContainerSetSlot: class extends Buffer {

		static get ID(){ return 50; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		constructor(window=0, slot=0, hotbarSlot=0, item=null, unknown4=0) {
			super();
			this.window = window;
			this.slot = slot;
			this.hotbarSlot = hotbarSlot;
			this.item = item;
			this.unknown4 = unknown4;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(50);
			this.writeBigEndianByte(this.window);
			this.writeVarint(this.slot);
			this.writeVarint(this.hotbarSlot);
			this.writeBytes(this.item.encode());
			this.writeBigEndianByte(this.unknown4);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.window=this.readBigEndianByte();
			this.slot=this.readVarint();
			this.hotbarSlot=this.readVarint();
			this.item=Types.Slot.fromBuffer(this._buffer); this._buffer=this.item._buffer;
			this.unknown4=this.readBigEndianByte();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ContainerSetSlot().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ContainerSetSlot(window: " + this.window + ", slot: " + this.slot + ", hotbarSlot: " + this.hotbarSlot + ", item: " + this.item + ", unknown4: " + this.unknown4 + ")";
		}

	},

	ContainerSetData: class extends Buffer {

		static get ID(){ return 51; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(window=0, property=0, value=0) {
			super();
			this.window = window;
			this.property = property;
			this.value = value;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(51);
			this.writeBigEndianByte(this.window);
			this.writeVarint(this.property);
			this.writeVarint(this.value);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.window=this.readBigEndianByte();
			this.property=this.readVarint();
			this.value=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ContainerSetData().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ContainerSetData(window: " + this.window + ", property: " + this.property + ", value: " + this.value + ")";
		}

	},

	ContainerSetContent: class extends Buffer {

		static get ID(){ return 52; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(window=0, slots=[], hotbar=[]) {
			super();
			this.window = window;
			this.slots = slots;
			this.hotbar = hotbar;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(52);
			this.writeBigEndianByte(this.window);
			this.writeVaruint(this.slots.length); for(var dhc5b9c in this.slots){ this.writeBytes(this.slots[dhc5b9c].encode()); }
			this.writeVaruint(this.hotbar.length); for(var dhc5bryi in this.hotbar){ this.writeVarint(this.hotbar[dhc5bryi]); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.window=this.readBigEndianByte();
			var aramcxdm=this.readVaruint(); this.slots=[]; for(var dhc5b9c=0;dhc5b9c<aramcxdm;dhc5b9c++){ this.slots[dhc5b9c]=Types.Slot.fromBuffer(this._buffer); this._buffer=this.slots[dhc5b9c]._buffer; }
			var arama9yf=this.readVaruint(); this.hotbar=[]; for(var dhc5bryi=0;dhc5bryi<arama9yf;dhc5bryi++){ this.hotbar[dhc5bryi]=this.readVarint(); }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ContainerSetContent().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ContainerSetContent(window: " + this.window + ", slots: " + this.slots + ", hotbar: " + this.hotbar + ")";
		}

	},

	CraftingData: class extends Buffer {

		static get ID(){ return 53; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(recipes=[]) {
			super();
			this.recipes = recipes;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(53);
			this.writeVaruint(this.recipes.length); for(var dhc5zncv in this.recipes){ this.writeBytes(this.recipes[dhc5zncv].encode()); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			var aramcvab=this.readVaruint(); this.recipes=[]; for(var dhc5zncv=0;dhc5zncv<aramcvab;dhc5zncv++){ this.recipes[dhc5zncv]=Types.Recipe.fromBuffer(this._buffer); this._buffer=this.recipes[dhc5zncv]._buffer; }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.CraftingData().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "CraftingData(recipes: " + this.recipes + ")";
		}

	},

	CraftingEvent: class extends Buffer {

		static get ID(){ return 54; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(window=0, type=0, uuid=new Uint8Array(16), input=[], output=[]) {
			super();
			this.window = window;
			this.type = type;
			this.uuid = uuid;
			this.input = input;
			this.output = output;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(54);
			this.writeBigEndianByte(this.window);
			this.writeVarint(this.type);
			this.writeBytes(this.uuid);
			this.writeVaruint(this.input.length); for(var dhc5bbd in this.input){ this.writeBytes(this.input[dhc5bbd].encode()); }
			this.writeVaruint(this.output.length); for(var dhc5drdq in this.output){ this.writeBytes(this.output[dhc5drdq].encode()); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.window=this.readBigEndianByte();
			this.type=this.readVarint();
			this.uuid=this.readBytes(16);
			var arama5dq=this.readVaruint(); this.input=[]; for(var dhc5bbd=0;dhc5bbd<arama5dq;dhc5bbd++){ this.input[dhc5bbd]=Types.Slot.fromBuffer(this._buffer); this._buffer=this.input[dhc5bbd]._buffer; }
			var arambvcv=this.readVaruint(); this.output=[]; for(var dhc5drdq=0;dhc5drdq<arambvcv;dhc5drdq++){ this.output[dhc5drdq]=Types.Slot.fromBuffer(this._buffer); this._buffer=this.output[dhc5drdq]._buffer; }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.CraftingEvent().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "CraftingEvent(window: " + this.window + ", type: " + this.type + ", uuid: " + this.uuid + ", input: " + this.input + ", output: " + this.output + ")";
		}

	},

	/**
	 * Updates the world's settings and client's permissions.
	 */
	AdventureSettings: class extends Buffer {

		static get ID(){ return 55; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		// flags
		static get IMMUTABLE_WORLD(){ return 1; }
		static get PVP_DISABLED(){ return 2; }
		static get PVM_DISABLED(){ return 4; }
		static get MVP_DISBALED(){ return 8; }
		static get EVP_DISABLED(){ return 16; }
		static get AUTO_JUMP(){ return 32; }
		static get ALLOW_FLIGHT(){ return 64; }
		static get NO_CLIP(){ return 128; }
		static get FLYING(){ return 512; }

		// permissions
		static get USER(){ return 0; }
		static get OPERATOR(){ return 1; }
		static get HOST(){ return 2; }
		static get AUTOMATION(){ return 3; }
		static get ADMIN(){ return 4; }

		constructor(flags=0, permissions=0) {
			super();
			this.flags = flags;
			this.permissions = permissions;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(55);
			this.writeVaruint(this.flags);
			this.writeVaruint(this.permissions);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.flags=this.readVaruint();
			this.permissions=this.readVaruint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.AdventureSettings().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "AdventureSettings(flags: " + this.flags + ", permissions: " + this.permissions + ")";
		}

	},

	/**
	 * Sets a block entity's nbt tag, block's additional data that cannot be indicated
	 * in the block's meta. More informations about block entities and their tag format
	 * can be found on Minecraft Wiki.
	 */
	BlockEntityData: class extends Buffer {

		static get ID(){ return 56; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		/**
		 * @param position
		 *        Position of the block that will be associated with tag.
		 * @param nbt
		 *        [Named binary tag](http://minecraft.gamepedia.com/NBT_format) of the block. The format varies
		 *        from the classic format of Minecraft: Pocket Edition (which is like Minecraft's but little endian)
		 *        introducing the use of varints for some types:
		 *        + The tag `Int` is encoded as a signed varint instead of a simple signed 32-bits integer
		 *        + The length of the `ByteArray` and the `IntArray` is encoded as an unsigned varint instead of a 32-bits
		 *        integer
		 *        + The length of the `String` tag and the named tag's name length are encoded as an unisgned varint
		 *        instead of a 16-bits integer
		 */
		constructor(position=null, nbt=null) {
			super();
			this.position = position;
			this.nbt = nbt;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(56);
			this.writeBytes(this.position.encode());
			this.writeBytes(this.nbt);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.position=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.position._buffer;
			this.nbt=Array.from(this._buffer); this._buffer=[];
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.BlockEntityData().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "BlockEntityData(position: " + this.position + ", nbt: " + this.nbt + ")";
		}

	},

	PlayerInput: class extends Buffer {

		static get ID(){ return 57; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(motion={x:0,y:0,z:0}, flags=0, unknown2=false) {
			super();
			this.motion = motion;
			this.flags = flags;
			this.unknown2 = unknown2;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(57);
			this.writeLittleEndianFloat(this.motion.x); this.writeLittleEndianFloat(this.motion.y); this.writeLittleEndianFloat(this.motion.z);
			this.writeBigEndianByte(this.flags);
			this.writeBigEndianByte(this.unknown2?1:0);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.motion={}; this.motion.x=this.readLittleEndianFloat(); this.motion.y=this.readLittleEndianFloat(); this.motion.z=this.readLittleEndianFloat();
			this.flags=this.readBigEndianByte();
			this.unknown2=this.readBigEndianByte()!==0;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.PlayerInput().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "PlayerInput(motion: " + this.motion + ", flags: " + this.flags + ", unknown2: " + this.unknown2 + ")";
		}

	},

	/**
	 * Sends a 16x16 chunk to the client with its blocks, lights and block entities (tiles).
	 */
	FullChunkData: class extends Buffer {

		static get ID(){ return 58; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		/**
		 * @param position
		 *        Coordinates of the chunk.
		 */
		constructor(position={x:0,z:0}, data=null) {
			super();
			this.position = position;
			this.data = data;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(58);
			this.writeVarint(this.position.x); this.writeVarint(this.position.z);
			this.writeBytes(this.data.encode());
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.position={}; this.position.x=this.readVarint(); this.position.z=this.readVarint();
			this.data=Types.ChunkData.fromBuffer(this._buffer); this._buffer=this.data._buffer;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.FullChunkData().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "FullChunkData(position: " + this.position + ", data: " + this.data + ")";
		}

	},

	/**
	 * Indicates whether the cheats are enabled. If not the client cannot send commands.
	 */
	SetCommandsEnabled: class extends Buffer {

		static get ID(){ return 59; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(enabled=false) {
			super();
			this.enabled = enabled;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(59);
			this.writeBigEndianByte(this.enabled?1:0);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.enabled=this.readBigEndianByte()!==0;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.SetCommandsEnabled().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetCommandsEnabled(enabled: " + this.enabled + ")";
		}

	},

	/**
	 * Sets the world's difficulty.
	 */
	SetDifficulty: class extends Buffer {

		static get ID(){ return 60; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// difficulty
		static get PEACEFUL(){ return 0; }
		static get EASY(){ return 1; }
		static get NORMAL(){ return 2; }
		static get HARD(){ return 3; }

		constructor(difficulty=0) {
			super();
			this.difficulty = difficulty;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(60);
			this.writeVaruint(this.difficulty);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.difficulty=this.readVaruint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.SetDifficulty().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetDifficulty(difficulty: " + this.difficulty + ")";
		}

	},

	ChangeDimension: class extends Buffer {

		static get ID(){ return 61; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// dimension
		static get OVERWORLD(){ return 0; }
		static get NETHER(){ return 1; }
		static get END(){ return 2; }

		constructor(dimension=0, position={x:0,y:0,z:0}, unknown2=false) {
			super();
			this.dimension = dimension;
			this.position = position;
			this.unknown2 = unknown2;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(61);
			this.writeVarint(this.dimension);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeBigEndianByte(this.unknown2?1:0);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.dimension=this.readVarint();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.unknown2=this.readBigEndianByte()!==0;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ChangeDimension().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ChangeDimension(dimension: " + this.dimension + ", position: " + this.position + ", unknown2: " + this.unknown2 + ")";
		}

	},

	/**
	 * Sets the player's gamemode. This packet is sent by the player when it has the operator
	 * status (set in AdventureSettings.permissions) and it changes the gamemode in the
	 * settings screen.
	 */
	SetPlayerGameType: class extends Buffer {

		static get ID(){ return 62; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		// gamemode
		static get SURVIVAL(){ return 0; }
		static get CREATIVE(){ return 1; }

		constructor(gamemode=0) {
			super();
			this.gamemode = gamemode;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(62);
			this.writeVarint(this.gamemode);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.gamemode=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.SetPlayerGameType().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetPlayerGameType(gamemode: " + this.gamemode + ")";
		}

	},

	/**
	 * Adds or removes a player from the player's list displayed in the pause menu. This
	 * packet should be sent before spawning a player with AddPlayer, otherwise the skin
	 * is not applied.
	 */
	PlayerList: class extends Buffer {

		static get ID(){ return 63; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// action (variant)
		static get ADD(){ return 0; }
		static get REMOVE(){ return 1; }

		constructor(action=0) {
			super();
			this.action = action;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(63);
			this.writeBigEndianByte(this.action);
	switch(this.action) {
		case 0:
			this.writeBigEndianByte(this.action);
			break;
		case 1:
			this.writeBigEndianByte(this.action);
			break;
		default: break;
	}
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.action=this.readBigEndianByte();
			switch(this.action) {
				case 0:
					var aramcxev=this.readVaruint(); this.players=[]; for(var dhc5bfzj=0;dhc5bfzj<aramcxev;dhc5bfzj++){ this.players[dhc5bfzj]=Types.PlayerList.fromBuffer(this._buffer); this._buffer=this.players[dhc5bfzj]._buffer; }
					break;
				case 1:
					var aramcxev=this.readVaruint(); this.players=[]; for(var dhc5bfzj=0;dhc5bfzj<aramcxev;dhc5bfzj++){ this.players[dhc5bfzj]=this.readBytes(16); }
					break;
				default: break;
			}
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.PlayerList().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "PlayerList(action: " + this.action + ")";
		}

	},

	TelemetryEvent: class extends Buffer {

		static get ID(){ return 64; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, eventId=0) {
			super();
			this.entityId = entityId;
			this.eventId = eventId;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(64);
			this.writeVarlong(this.entityId);
			this.writeVarint(this.eventId);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.eventId=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.TelemetryEvent().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "TelemetryEvent(entityId: " + this.entityId + ", eventId: " + this.eventId + ")";
		}

	},

	SpawnExperienceOrb: class extends Buffer {

		static get ID(){ return 65; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position={x:0,y:0,z:0}, count=0) {
			super();
			this.position = position;
			this.count = count;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(65);
			this.writeLittleEndianFloat(this.position.x); this.writeLittleEndianFloat(this.position.y); this.writeLittleEndianFloat(this.position.z);
			this.writeVarint(this.count);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.position={}; this.position.x=this.readLittleEndianFloat(); this.position.y=this.readLittleEndianFloat(); this.position.z=this.readLittleEndianFloat();
			this.count=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.SpawnExperienceOrb().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SpawnExperienceOrb(position: " + this.position + ", count: " + this.count + ")";
		}

	},

	ClientboundMapItemData: class extends Buffer {

		static get ID(){ return 66; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// update
		static get TEXTURE(){ return 2; }
		static get DECORATIONS(){ return 4; }
		static get ENTITIES(){ return 8; }

		/**
		 * @param size
		 *        Colums and rows.
		 * @param data
		 *        ARGB colours encoded as unsigned varints.
		 */
		constructor(mapId=0, update=0, scale=0, size={x:0,z:0}, offset={x:0,z:0}, data=null, decorations=[]) {
			super();
			this.mapId = mapId;
			this.update = update;
			this.scale = scale;
			this.size = size;
			this.offset = offset;
			this.data = data;
			this.decorations = decorations;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(66);
			this.writeVarlong(this.mapId);
			this.writeVaruint(this.update);
			if(update==2||update==4){ this.writeBigEndianByte(this.scale); }
			if(update==2){ this.writeVarint(this.size.x); this.writeVarint(this.size.z); }
			if(update==2){ this.writeVarint(this.offset.x); this.writeVarint(this.offset.z); }
			if(update==2){ this.writeBytes(this.data); }
			if(update==4){ this.writeVaruint(this.decorations.length); for(var dhc5zncf in this.decorations){ this.writeBytes(this.decorations[dhc5zncf].encode()); } }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.mapId=this.readVarlong();
			this.update=this.readVaruint();
			if(update==2||update==4){ this.scale=this.readBigEndianByte(); }
			if(update==2){ this.size={}; this.size.x=this.readVarint(); this.size.z=this.readVarint(); }
			if(update==2){ this.offset={}; this.offset.x=this.readVarint(); this.offset.z=this.readVarint(); }
			if(update==2){ this.data=Array.from(this._buffer); this._buffer=[]; }
			if(update==4){ var aramzvbj=this.readVaruint(); this.decorations=[]; for(var dhc5zncf=0;dhc5zncf<aramzvbj;dhc5zncf++){ this.decorations[dhc5zncf]=Types.Decoration.fromBuffer(this._buffer); this._buffer=this.decorations[dhc5zncf]._buffer; } }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ClientboundMapItemData().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ClientboundMapItemData(mapId: " + this.mapId + ", update: " + this.update + ", scale: " + this.scale + ", size: " + this.size + ", offset: " + this.offset + ", data: " + this.data + ", decorations: " + this.decorations + ")";
		}

	},

	MapInfoRequest: class extends Buffer {

		static get ID(){ return 67; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(mapId=0) {
			super();
			this.mapId = mapId;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(67);
			this.writeVarlong(this.mapId);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.mapId=this.readVarlong();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.MapInfoRequest().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "MapInfoRequest(mapId: " + this.mapId + ")";
		}

	},

	/**
	 * Packet sent by the client when its view-distance is updated and when it spawns for
	 * the first time a world. A ChunkRadiusUpdate should always be sent in response, otherwise
	 * the player will not update its view distance.
	 */
	RequestChunkRadius: class extends Buffer {

		static get ID(){ return 68; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		/**
		 * @param radius
		 *        Number of chunks before the fog starts to appear in the client's view. The value of this field is usually
		 *        between 8 and 14.
		 */
		constructor(radius=0) {
			super();
			this.radius = radius;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(68);
			this.writeVarint(this.radius);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.radius=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.RequestChunkRadius().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "RequestChunkRadius(radius: " + this.radius + ")";
		}

	},

	/**
	 * Packet sent always and only in response to RequestChunkRadius to change the client's
	 * view distance.
	 */
	ChunkRadiusUpdated: class extends Buffer {

		static get ID(){ return 69; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		/**
		 * @param radius
		 *        View distance that may be different from the client's one if the server sets a limit on the view distance.
		 */
		constructor(radius=0) {
			super();
			this.radius = radius;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(69);
			this.writeVarint(this.radius);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.radius=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ChunkRadiusUpdated().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ChunkRadiusUpdated(radius: " + this.radius + ")";
		}

	},

	ItemFrameDropItem: class extends Buffer {

		static get ID(){ return 70; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position=null, item=null) {
			super();
			this.position = position;
			this.item = item;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(70);
			this.writeBytes(this.position.encode());
			this.writeBytes(this.item.encode());
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.position=Types.BlockPosition.fromBuffer(this._buffer); this._buffer=this.position._buffer;
			this.item=Types.Slot.fromBuffer(this._buffer); this._buffer=this.item._buffer;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ItemFrameDropItem().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ItemFrameDropItem(position: " + this.position + ", item: " + this.item + ")";
		}

	},

	ReplaceSelectedItem: class extends Buffer {

		static get ID(){ return 71; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(item=null) {
			super();
			this.item = item;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(71);
			this.writeBytes(this.item.encode());
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.item=Types.Slot.fromBuffer(this._buffer); this._buffer=this.item._buffer;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ReplaceSelectedItem().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ReplaceSelectedItem(item: " + this.item + ")";
		}

	},

	/**
	 * Updates client's game rules. This packet is ignored if the game is not launched
	 * as Education Edition and should be avoid in favour of AdventureSettings, with which
	 * the same result can be obtained with less data.
	 */
	GameRulesChanged: class extends Buffer {

		static get ID(){ return 72; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(rules=null) {
			super();
			this.rules = rules;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(72);
			this.writeBigEndianInt(this.rules.length); for(var dhc5dxc in this.rules){ this.writeBytes(this.rules[dhc5dxc].encode()); }
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			var aramcvzm=this.readBigEndianInt(); this.rules=[]; for(var dhc5dxc=0;dhc5dxc<aramcvzm;dhc5dxc++){ this.rules[dhc5dxc]=Types.Rule.fromBuffer(this._buffer); this._buffer=this.rules[dhc5dxc]._buffer; }
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.GameRulesChanged().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "GameRulesChanged(rules: " + this.rules + ")";
		}

	},

	Camera: class extends Buffer {

		static get ID(){ return 73; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(unknown0=0, unknown1=0) {
			super();
			this.unknown0 = unknown0;
			this.unknown1 = unknown1;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(73);
			this.writeVarlong(this.unknown0);
			this.writeVarlong(this.unknown1);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.unknown0=this.readVarlong();
			this.unknown1=this.readVarlong();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.Camera().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Camera(unknown0: " + this.unknown0 + ", unknown1: " + this.unknown1 + ")";
		}

	},

	AddItem: class extends Buffer {

		static get ID(){ return 74; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(item=null) {
			super();
			this.item = item;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(74);
			this.writeBytes(this.item.encode());
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.item=Types.Slot.fromBuffer(this._buffer); this._buffer=this.item._buffer;
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.AddItem().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "AddItem(item: " + this.item + ")";
		}

	},

	/**
	 * Adds, removes or modifies an entity's boss bar. The percentage of the bar is calculated
	 * using the entity's attributes for the health and the max health, updated with UpdateAttributes.
	 */
	BossEvent: class extends Buffer {

		static get ID(){ return 75; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// event id
		static get ADD(){ return 0; }
		static get UPDATE(){ return 1; }
		static get REMOVE(){ return 2; }

		constructor(entityId=0, eventId=0) {
			super();
			this.entityId = entityId;
			this.eventId = eventId;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(75);
			this.writeVarlong(this.entityId);
			this.writeVaruint(this.eventId);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.eventId=this.readVaruint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.BossEvent().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "BossEvent(entityId: " + this.entityId + ", eventId: " + this.eventId + ")";
		}

	},

	ShowCredits: class extends Buffer {

		static get ID(){ return 76; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		// status
		static get START(){ return 0; }
		static get END(){ return 1; }

		constructor(entityId=0, status=0) {
			super();
			this.entityId = entityId;
			this.status = status;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(76);
			this.writeVarlong(this.entityId);
			this.writeVarint(this.status);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.entityId=this.readVarlong();
			this.status=this.readVarint();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ShowCredits().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ShowCredits(entityId: " + this.entityId + ", status: " + this.status + ")";
		}

	},

	/**
	 * Sends a list of the commands that the player can use through the CommandStep packet.
	 */
	AvailableCommands: class extends Buffer {

		static get ID(){ return 77; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		/**
		 * @param commands
		 *        JSON object with the commands.
		 */
		constructor(commands="", unknown1="") {
			super();
			this.commands = commands;
			this.unknown1 = unknown1;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(77);
			var dhc5b1y5=this.encodeString(this.commands); this.writeVaruint(dhc5b1y5.length); this.writeBytes(dhc5b1y5);
			var dhc5btbd=this.encodeString(this.unknown1); this.writeVaruint(dhc5btbd.length); this.writeBytes(dhc5btbd);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.commands=this.decodeString(this.readBytes(this.readVaruint()));
			this.unknown1=this.decodeString(this.readBytes(this.readVaruint()));
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.AvailableCommands().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "AvailableCommands(commands: " + this.commands + ", unknown1: " + this.unknown1 + ")";
		}

	},

	CommandStep: class extends Buffer {

		static get ID(){ return 78; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(command="", overload="", unknown2=0, currentStep=0, done=false, clientId=0, input="", output="") {
			super();
			this.command = command;
			this.overload = overload;
			this.unknown2 = unknown2;
			this.currentStep = currentStep;
			this.done = done;
			this.clientId = clientId;
			this.input = input;
			this.output = output;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(78);
			var dhc5b1y5=this.encodeString(this.command); this.writeVaruint(dhc5b1y5.length); this.writeBytes(dhc5b1y5);
			var dhc5dvb9=this.encodeString(this.overload); this.writeVaruint(dhc5dvb9.length); this.writeBytes(dhc5dvb9);
			this.writeVaruint(this.unknown2);
			this.writeVaruint(this.currentStep);
			this.writeBigEndianByte(this.done?1:0);
			this.writeVarulong(this.clientId);
			var dhc5bbd=this.encodeString(this.input); this.writeVaruint(dhc5bbd.length); this.writeBytes(dhc5bbd);
			var dhc5drdq=this.encodeString(this.output); this.writeVaruint(dhc5drdq.length); this.writeBytes(dhc5drdq);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.command=this.decodeString(this.readBytes(this.readVaruint()));
			this.overload=this.decodeString(this.readBytes(this.readVaruint()));
			this.unknown2=this.readVaruint();
			this.currentStep=this.readVaruint();
			this.done=this.readBigEndianByte()!==0;
			this.clientId=this.readVarulong();
			this.input=this.decodeString(this.readBytes(this.readVaruint()));
			this.output=this.decodeString(this.readBytes(this.readVaruint()));
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.CommandStep().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "CommandStep(command: " + this.command + ", overload: " + this.overload + ", unknown2: " + this.unknown2 + ", currentStep: " + this.currentStep + ", done: " + this.done + ", clientId: " + this.clientId + ", input: " + this.input + ", output: " + this.output + ")";
		}

	},

	ResourcePackDataInfo: class extends Buffer {

		static get ID(){ return 79; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(id="", maxChunkSize=0, chunkCount=0, compressedPackSize=0, sha256="") {
			super();
			this.id = id;
			this.maxChunkSize = maxChunkSize;
			this.chunkCount = chunkCount;
			this.compressedPackSize = compressedPackSize;
			this.sha256 = sha256;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(79);
			var dhc5z=this.encodeString(this.id); this.writeVaruint(dhc5z.length); this.writeBytes(dhc5z);
			this.writeLittleEndianInt(this.maxChunkSize);
			this.writeLittleEndianInt(this.chunkCount);
			this.writeLittleEndianLong(this.compressedPackSize);
			var dhc5aeny=this.encodeString(this.sha256); this.writeVaruint(dhc5aeny.length); this.writeBytes(dhc5aeny);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.id=this.decodeString(this.readBytes(this.readVaruint()));
			this.maxChunkSize=this.readLittleEndianInt();
			this.chunkCount=this.readLittleEndianInt();
			this.compressedPackSize=this.readLittleEndianLong();
			this.sha256=this.decodeString(this.readBytes(this.readVaruint()));
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ResourcePackDataInfo().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ResourcePackDataInfo(id: " + this.id + ", maxChunkSize: " + this.maxChunkSize + ", chunkCount: " + this.chunkCount + ", compressedPackSize: " + this.compressedPackSize + ", sha256: " + this.sha256 + ")";
		}

	},

	ResourcePackChunkData: class extends Buffer {

		static get ID(){ return 80; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(id="", chunkIndex=0, progress=0, data=[]) {
			super();
			this.id = id;
			this.chunkIndex = chunkIndex;
			this.progress = progress;
			this.data = data;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(80);
			var dhc5z=this.encodeString(this.id); this.writeVaruint(dhc5z.length); this.writeBytes(dhc5z);
			this.writeLittleEndianInt(this.chunkIndex);
			this.writeLittleEndianLong(this.progress);
			this.writeVaruint(this.data.length); this.writeBytes(this.data);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.id=this.decodeString(this.readBytes(this.readVaruint()));
			this.chunkIndex=this.readLittleEndianInt();
			this.progress=this.readLittleEndianLong();
			var aramzfy=this.readVaruint(); this.data=this.readBytes(aramzfy);
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ResourcePackChunkData().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ResourcePackChunkData(id: " + this.id + ", chunkIndex: " + this.chunkIndex + ", progress: " + this.progress + ", data: " + this.data + ")";
		}

	},

	ResourcePackChunkRequest: class extends Buffer {

		static get ID(){ return 81; }

		static get CLIENTBOUND(){ return false; }
		static get SERVERBOUND(){ return true; }

		constructor(id="", chunkIndex=0) {
			super();
			this.id = id;
			this.chunkIndex = chunkIndex;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(81);
			var dhc5z=this.encodeString(this.id); this.writeVaruint(dhc5z.length); this.writeBytes(dhc5z);
			this.writeLittleEndianInt(this.chunkIndex);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.id=this.decodeString(this.readBytes(this.readVaruint()));
			this.chunkIndex=this.readLittleEndianInt();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.ResourcePackChunkRequest().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ResourcePackChunkRequest(id: " + this.id + ", chunkIndex: " + this.chunkIndex + ")";
		}

	},

	/**
	 * Transfers the player to another server. Once transferred the player will immediately
	 * close the connection with the transferring server, try to resolve the ip and join
	 * the new server starting a new raknet session.
	 */
	Transfer: class extends Buffer {

		static get ID(){ return 82; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		/**
		 * @param ip
		 *        Address of the new server. It can be an dotted ip (for example `127.0.0.1`) or an URI (for example
		 *        `localhost` or `play.example.com`). Only IP of version 4 are currently allowed.
		 * @param port
		 *        Port of the new server. If 0 the server will try to connect to the default port.
		 */
		constructor(ip="", port=19132) {
			super();
			this.ip = ip;
			this.port = port;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(82);
			var dhc5c=this.encodeString(this.ip); this.writeVaruint(dhc5c.length); this.writeBytes(dhc5c);
			this.writeLittleEndianShort(this.port);
			return new Uint8Array(this._buffer);
		}

		/** @param {(Uint8Array|Array)} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			var _id=this.readBigEndianByte();
			this.ip=this.decodeString(this.readBytes(this.readVaruint()));
			this.port=this.readLittleEndianShort();
			return this;
		}

		/** @param {(Uint8Array|Array)} buffer */
		static fromBuffer(buffer) {
			return new Play.Transfer().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Transfer(ip: " + this.ip + ", port: " + this.port + ")";
		}

	},

}

//export { Play };